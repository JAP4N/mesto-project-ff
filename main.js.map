{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/componets/modal.js","webpack://mesto-project-ff/./src/componets/api.js","webpack://mesto-project-ff/./src/componets/card.js","webpack://mesto-project-ff/./src/componets/validation.js","webpack://mesto-project-ff/./src/scripts/index.js"],"sourcesContent":["// Открытие popup'a\r\nexport const openPopup = somePopup => {\r\n    somePopup.classList.add(\"popup_is-opened\");\r\n    document.addEventListener(\"keydown\", closePopupByEsc);\r\n    document.addEventListener(\"mousedown\", closePopupByOverlay)\r\n};\r\n\r\n// Закрытие popup'a\r\nexport const closePopup = somePopup => {\r\n    somePopup.classList.remove(\"popup_is-opened\");\r\n    document.removeEventListener(\"keydown\", closePopupByEsc);\r\n    document.removeEventListener(\"mousedown\", closePopupByOverlay);\r\n};\r\n\r\n// Закрытие popup'a при нажатии на Esc\r\nconst closePopupByEsc = evt => {\r\n    if (evt.key === \"Escape\") {\r\n        const openPopup = document.querySelector(\".popup_is-opened\");\r\n        if (openPopup) {\r\n            closePopup(openPopup);\r\n        }\r\n    }\r\n};\r\n\r\n// Закрытие popup'а по overlay'ю\r\nconst closePopupByOverlay = (evt) => {\r\n    if (evt.target.classList.contains(\"popup_is-opened\")) {\r\n        closePopup(evt.target);\r\n    }\r\n}\r\n\r\n//Отображение загрузки данных\r\nexport const renderLoading = (isLoading, formElement) => {\r\n    const activeBtnSubmit= formElement.querySelector(\".popup__button\")\r\n\r\n    if (isLoading) {\r\n        activeBtnSubmit.textContent = \"Сохранить...\";\r\n    } else if (!isLoading) {\r\n        activeBtnSubmit.textContent = \"Сохранить\";\r\n    }\r\n  };","const baseURL = 'https://mesto.nomoreparties.co';\r\nconst groupId = 'wff-cohort-17';\r\nconst token = '3da66894-1d7a-436c-a006-4109dd78abb3';\r\n\r\n//Функция загрузки информации о пользователе с сервера\r\nexport const loadUserData = () => {\r\n    return fetch(`${baseURL}/v1/${groupId}/users/me`, {\r\n        headers: {\r\n            authorization: token\r\n        }\r\n    })\r\n    .then(res => {\r\n        if (res.ok) {\r\n            return res.json();\r\n        }\r\n        return Promise.reject(res.status)\r\n    })\r\n    .catch(err => {\r\n        console.log(`Ошибка при загрузке данных пользователя - ${err}`)\r\n    });\r\n};\r\n\r\n//Функция загрузки карточек\r\nexport const loadCards = () => {\r\n     return fetch(`${baseURL}/v1/${groupId}/cards`, {\r\n        headers: {\r\n            authorization: token\r\n        }   \r\n    })\r\n    .then(res => {\r\n        if (res.ok) {\r\n            return res.json();\r\n        }\r\n        return Promise.reject(res.status)\r\n    })\r\n    .catch(err => {\r\n        console.log(`Ошибка при выгрузке карточек - ${err}`)\r\n    });\r\n};\r\n\r\n//Функция обновления данных профиля\r\nexport const updateUserData = (name, about) => {\r\n    return fetch(`${baseURL}/v1/${groupId}/users/me`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          authorization: token,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          name: name,\r\n          about: about\r\n        })\r\n    })\r\n    .then(res => {\r\n        if (res.ok) {\r\n            return res.json();\r\n        }\r\n        return Promise.reject(res.status)\r\n    })\r\n    .catch(err => {\r\n        console.log(`Ошибка при обновлении данных профиля - ${err}`)\r\n    });\r\n};\r\n\r\n//Функция добавления новой карточки\r\nexport const addNewCard = (name, link) => {\r\n    return fetch(`${baseURL}/v1/${groupId}/cards`, {\r\n        method: 'POST',\r\n        headers: {\r\n          authorization: token,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          name: name,\r\n          link: link\r\n        })\r\n    })\r\n    .then(res => {\r\n        if (res.ok) {\r\n            return res.json();\r\n        }\r\n        return Promise.reject(res.status)\r\n    })\r\n    .catch(err => {\r\n        console.log(`Ошибка при добавлении новой карточки - ${err}`)\r\n    });\r\n};\r\n\r\n\r\n//Функция обновления колличества лайков под карточкой\r\nexport const toggleLike = (cardId, isLiked) => {\r\n    // Если isLiked истинно - DELETE. Если isLiked ложно - PUT\r\n    const method = isLiked ? 'DELETE' : 'PUT';\r\n\r\n    return fetch(`${baseURL}/v1/${groupId}/cards/likes/${cardId}`, {\r\n        method: method,\r\n        headers: {\r\n            authorization: token,\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n    .then(res => {\r\n        if (res.ok) {\r\n            return res.json();\r\n        }\r\n        return Promise.reject(res.status);\r\n    })\r\n    .catch(err => {\r\n        console.log(`Ошибка при обновлении лайка - ${err}`);\r\n    });\r\n};\r\n\r\n//Функция удаления карточки\r\nexport const deleteUserCard = (cardId) => {\r\n    return fetch(`${baseURL}/v1/${groupId}/cards/${cardId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            authorization: token\r\n        }\r\n    })\r\n    .then(res => {\r\n        if (res.ok) {\r\n            return res.json();\r\n        }\r\n        return Promise.reject(res.status)\r\n    })\r\n    .catch(err => {\r\n        console.log(`Ошибка при удалении карточки - ${err}`)\r\n    });\r\n};\r\n\r\n//Функция обновления аватара пользователя\r\nexport const updateUserAvatar = (avatar) => {\r\n    return fetch(`${baseURL}/v1/${groupId}/users/me/avatar`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            authorization: token,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            avatar: avatar\r\n        })\r\n    })\r\n    .then(res => {\r\n        if (res.ok) {\r\n            return res.json();\r\n        }\r\n        return Promise.reject(res.status)\r\n    })\r\n    .catch(err => {\r\n        console.log(`Ошибка при обновлении аватара профиля - ${err}`)\r\n    });\r\n};\r\n\r\n","import { toggleLike, deleteUserCard } from './api.js'\r\n\r\n//Функция создания карточки\r\nexport function createCard ({name, link, likes, _id, owner}, userId, deleteCard, likeCardBtn, modalOpenImageCard) {\r\n    const cardTemplate = document.querySelector(\"#card-template\").content;\r\n    const cardItem = cardTemplate.querySelector(\".card\").cloneNode(true);\r\n    const cardTitle = cardItem.querySelector(\".card__title\").textContent = name;\r\n    const cardImage = cardItem.querySelector(\".card__image\");\r\n    const likeCounter = cardItem.querySelector(\".card__like-count\");\r\n    const likeButton = cardItem.querySelector(\".card__like-button\");\r\n    const deleteButton = cardItem.querySelector(\".card__delete-button\");\r\n\r\n    cardImage.src = link;            \r\n    cardImage.alt = name;  \r\n    likeCounter.textContent = likes.length;\r\n\r\n    // Проверяем, лайкнута ли карточка текущим пользователем\r\n    likes.forEach(like => {\r\n        if (like._id === userId) {\r\n            likeButton.classList.add(\"card__like-button_is-active\");\r\n        }\r\n    });\r\n\r\n    // Проверка на владельца карточки\r\n    if (owner._id === userId) {\r\n        deleteButton.addEventListener(\"click\", () => deleteCard(_id, cardItem));\r\n    }   else {\r\n        deleteButton.remove();\r\n    }\r\n\r\n    cardItem.querySelector(\".card__like-button\").addEventListener(\"click\", () => likeCardBtn(_id, likeCounter, likeButton));\r\n    cardImage.addEventListener(\"click\", () => modalOpenImageCard(name, link));\r\n\r\n    return cardItem;\r\n}\r\n\r\n//удаление карточки\r\nexport const deleteCardBtn = (cardId, cardElement) => {\r\n    deleteUserCard(cardId)\r\n        .then(() => {\r\n            cardElement.remove();\r\n        })\r\n        .catch(err => {\r\n            console.error(`Ошибка при удалении карточки - ${err}`)\r\n        })\r\n};\r\n\r\n// функция добавления/удаления like'а\r\nexport const likeCardBtn = (cardId, likeCounter, likeButton) => {\r\n    const isLiked = likeButton.classList.contains(\"card__like-button_is-active\");\r\n\r\n    toggleLike(cardId, isLiked)\r\n        .then(updateCard =>  {\r\n            likeCounter.textContent = updateCard.likes.length;\r\n            likeButton.classList.toggle(\"card__like-button_is-active\");\r\n        })\r\n        .catch(err => {\r\n            console.error(`Ошибка при обновлении лайка - ${err}`);\r\n        });\r\n};\r\n","//Показать ошибку ввода\r\nconst showInputError = (formElement, inputElement, errorMessage, inputErrorClass, errorClass) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n\r\n    inputElement.classList.add(inputErrorClass)\r\n    errorElement.textContent = errorMessage;\r\n    errorElement.classList.add(errorClass);\r\n};\r\n\r\n//Скрыть ошибку ввода\r\nconst hideInputError = (formElement, inputElement, inputErrorClass, errorClass) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n\r\n    inputElement.classList.remove(inputErrorClass)\r\n    errorElement.classList.remove(errorClass);\r\n    errorElement.textContent = \"\";\r\n\r\n};\r\n\r\n//Проверка валидности поля popap'а\r\nconst isValid = (formElement, inputElement, inputErrorClass, errorClass) => {\r\n    if (inputElement.validity.patternMismatch) {\r\n        inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n    }   else {\r\n        inputElement.setCustomValidity(\"\");\r\n    }\r\n\r\n    if (!inputElement.validity.valid) {\r\n        showInputError(formElement, inputElement, inputElement.validationMessage, inputErrorClass, errorClass);\r\n    } else {\r\n        hideInputError(formElement, inputElement, inputErrorClass, errorClass);\r\n    }\r\n}\r\n\r\n//Проверка на наличие невалидных полей\r\nconst hasInvalidInput = (inputList) => {\r\n    return inputList.some(inputElement => {\r\n        return !inputElement.validity.valid;\r\n    })\r\n};\r\n\r\n//отслеживание состояния кнопки\r\nconst toggleButtonState = (inputList, buttonElement, inactiveButtonClass) => {\r\n    if (hasInvalidInput(inputList)) {\r\n        buttonElement.disavled = true;\r\n        buttonElement.classList.add(inactiveButtonClass);\r\n    } else {\r\n        buttonElement.disavled = false;\r\n        buttonElement.classList.remove(inactiveButtonClass);\r\n    }\r\n}\r\n\r\n//Установка слушателей для полей\r\nconst setEventListeners = (formElement, {\r\n    inputSelector,\r\n    submitButtonSelector,\r\n    inactiveButtonClass,\r\n    inputErrorClass,\r\n    errorClass\r\n  }) => {\r\n    const inputList = Array.from(formElement.querySelectorAll(inputSelector));\r\n    const buttonElement = formElement.querySelector(submitButtonSelector);\r\n\r\n    toggleButtonState(inputList, buttonElement, inactiveButtonClass);\r\n\r\n    inputList.forEach(inputElement => {\r\n        inputElement.addEventListener(\"input\", () => {\r\n\r\n            isValid(formElement, inputElement, inputErrorClass, errorClass)\r\n            toggleButtonState(inputList, buttonElement, inactiveButtonClass);\r\n        });\r\n    });\r\n};\r\n\r\n//Функция активации валидации\r\nexport const enableValidation = ({\r\n    formSelector,\r\n    inputSelector,\r\n    submitButtonSelector,\r\n    inactiveButtonClass,\r\n    inputErrorClass,\r\n    errorClass\r\n  }) => {\r\n\r\n\r\n    const formList = Array.from(document.querySelectorAll(\".popup__form\"))\r\n\r\n    formList.forEach(formElement => {\r\n        setEventListeners(formElement, {\r\n            formSelector,\r\n            inputSelector,\r\n            submitButtonSelector,\r\n            inactiveButtonClass,\r\n            inputErrorClass,\r\n            errorClass\r\n          });\r\n    });\r\n};\r\n\r\n//Функция очистки ошибок валидации\r\nexport const clearValidation = (formElement, validationConfig) => {\r\n    const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n    const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n\r\n    inputList.forEach((inputElement) => {\r\n        hideInputError(formElement, inputElement, validationConfig.inputErrorClass, validationConfig.errorClass);\r\n    });\r\n\r\n    toggleButtonState(inputList, buttonElement, validationConfig.inactiveButtonClass);\r\n};","import '/src/pages/index.css';\r\nimport '../componets/api.js';\r\n\r\n//import\r\nimport { openPopup, closePopup, renderLoading } from '../componets/modal.js'\r\nimport { likeCardBtn, createCard, deleteCardBtn } from '../componets/card.js'\r\nimport { enableValidation, clearValidation } from '../componets/validation.js'\r\nimport {loadUserData, loadCards, updateUserData, addNewCard, updateUserAvatar } from '../componets/api.js'\r\n\r\n//DOM main content\r\nconst mainContent = document.querySelector(\".content\")\r\n\r\n//Слушатели появления popup'ов\r\nconst profileEditButton = mainContent.querySelector(\".profile__edit-button\");\r\nconst profileAddButton = document.querySelector(\".profile__add-button\");\r\nconst profileEditAvatar = document.querySelector(\".profile__image\");\r\n\r\n//Слушатели ичезновения popup'ов\r\nconst popupCloseBtnAll = document.querySelectorAll(\".popup__close\");\r\n\r\n//form\r\nconst editForm = document.forms.edit_profile;\r\nconst newPlace = document.forms.new_place;\r\nconst editAvatar = document.forms.edit_avatar;\r\n\r\n//DOM popup\r\nconst popupEdit = document.querySelector(\".popup_type_edit\");\r\nconst popupNewCard = document.querySelector(\".popup_type_new-card\");\r\nconst popupTypeImage = document.querySelector(\".popup_type_image\");\r\nconst popupEditAvatar = document.querySelector(\".popup_type_edit-avatar\");\r\n\r\n//Темплейт карточки\r\nconst cardList = document.querySelector(\".places__list\");\r\n\r\n//Контент карточки\r\nconst popupCaption = popupTypeImage.querySelector(\".popup__caption\");\r\nconst popupImage = popupTypeImage.querySelector(\".popup__image\");\r\n\r\n//Поля формы создания карточки IMG\r\nconst nameCardPopup = document.querySelector(\".popup__input_type_card-name\");\r\nconst linkImgPopup = document.querySelector(\".popup__input_type_url\");\r\n\r\n//Поля формы редактирования профиля\r\nconst nameInput = document.querySelector(\".popup__input_type_name\");\r\nconst jobInput = document.querySelector(\".popup__input_type_description\");\r\n\r\n//поля вывода карточек на страницу\r\nconst profileTitle = document.querySelector(\".profile__title\");\r\nconst profileDescription = document.querySelector(\".profile__description\");\r\nconst profileAvatar = document.querySelector(\".profile__image\");\r\n\r\n//Конфиг для валидации\r\nconst validationConfig = {\r\n    formSelector: '.popup__form',\r\n    inputSelector: '.popup__input',\r\n    submitButtonSelector: '.popup__button',\r\n    inactiveButtonClass: 'popup__button_inactive',\r\n    inputErrorClass: 'form__input_type_error',\r\n    errorClass: 'form__input-error_active'\r\n}\r\n\r\n//Загрузка данных пользователя и карточек\r\nPromise.all([loadUserData(), loadCards()])\r\n    .then(([userData, cards]) => {\r\n        const userId = userData._id;\r\n        profileTitle.textContent = userData.name;\r\n        profileDescription.textContent = userData.about;\r\n        profileAvatar.src = userData.avatar;\r\n\r\n        cards.forEach(cardData => {\r\n            const newCardItem = createCard({...cardData, owner: cardData.owner}, userId, deleteCardBtn, likeCardBtn, modalOpenImageCard);\r\n            cardList.append(newCardItem);\r\n        });\r\n    })\r\n    .catch(err => {\r\n        console.error(`Ошибка при загрузке данных - ${err}`);\r\n    });\r\n\r\n//ручное создание карточки\r\nconst handleCreateCard = evt => {\r\n    evt.preventDefault();\r\n\r\n    const name = nameCardPopup.value; \r\n    const link = linkImgPopup.value;\r\n\r\n    renderLoading(true, newPlace);\r\n\r\n    addNewCard(name, link)\r\n        .then(newCard => {\r\n            const userId = profileTitle.textContent; // Используем id текущего пользователя\r\n            const newCardItem = createCard({...newCard, owner: { _id: userId }}, userId, deleteCardBtn, likeCardBtn, modalOpenImageCard);\r\n            cardList.prepend(newCardItem);\r\n            // Закрываем форму\r\n            closePopup(popupNewCard);\r\n        })\r\n        .catch(err => {\r\n            console.error(`Ошибка при добавлении новой карточки - ${err}`);\r\n        })\r\n        .finally(() => {\r\n            renderLoading(false, newPlace);\r\n        });\r\n};\r\n\r\n//Изменение данных профиля\r\nconst  handleFormEdit = evt => {\r\n    evt.preventDefault();\r\n\r\n    const name = nameInput.value;\r\n    const job = jobInput.value;\r\n\r\n    renderLoading(true, editForm);\r\n\r\n    updateUserData(name, job)\r\n    .then(newUser => {\r\n        profileTitle.textContent = newUser.name;\r\n        profileDescription.textContent = newUser.about;\r\n        // Закрываем форму\r\n        closePopup(popupEdit);\r\n    })\r\n    .catch(err => {\r\n        console.error(`Ошибка при обновлении данных профиля - ${err}`);\r\n    })\r\n    .finally(() => {\r\n        renderLoading(false, editForm);\r\n    });\r\n};\r\n\r\n//Обновление аватара пользователя\r\nconst handleEditAvatar = evt => {\r\n    evt.preventDefault();\r\n\r\n    const avatarLink = editAvatar.querySelector(\".popup__input_type_url\").value;\r\n\r\n    renderLoading(true, editAvatar);\r\n\r\n    updateUserAvatar(avatarLink)\r\n        .then(newUser => {\r\n            profileAvatar.src = newUser.avatar;\r\n            \r\n            // Закрываем форму\r\n            closePopup(popupEditAvatar);\r\n        })\r\n        .catch(err => {\r\n            console.error(`Ошибка при обновлении аватара профиля - ${err}`)\r\n        })\r\n        .finally(() => {\r\n            renderLoading(false, editAvatar);\r\n        });\r\n};\r\n\r\n//Функция открытия модального окна картинки\r\nexport const modalOpenImageCard = (name, link) => {\r\n    popupCaption.textContent = name;\r\n    popupImage.src = link;\r\n    popupImage.alt = name;\r\n\r\n    openPopup(popupTypeImage);\r\n};\r\n\r\n//Вывести popup edit на страницу\r\nprofileEditButton.addEventListener(\"click\", () => {\r\n    nameInput.value = profileTitle.textContent;\r\n    jobInput.value  = profileDescription.textContent;\r\n\r\n    const formElement = popupEdit.querySelector('.popup__form');\r\n\r\n    //Очистка ошибок валидации\r\n    clearValidation(formElement, validationConfig);\r\n\r\n    openPopup(popupEdit);\r\n});\r\n\r\n//Вывести popup addCard на страницу\r\nprofileAddButton.addEventListener(\"click\", () => {\r\n    // Очищаем форму\r\n    newPlace.reset();\r\n\r\n    const formElement = popupNewCard.querySelector('.popup__form');\r\n\r\n    //Очистка ошибок валидации\r\n    clearValidation(formElement, validationConfig);\r\n\r\n    openPopup(popupNewCard);\r\n});\r\n\r\n//Вывести popup EditAvatar на страницу\r\nprofileEditAvatar.addEventListener(\"click\", () => {\r\n    // Очищаем форму\r\n    editAvatar.reset();\r\n\r\n    const formElement = popupEditAvatar.querySelector('.popup__form');\r\n\r\n    //Очистка ошибок валидации\r\n    clearValidation(formElement, validationConfig);\r\n\r\n    openPopup(popupEditAvatar);\r\n});\r\n\r\n//закрыть popup\r\npopupCloseBtnAll.forEach(item => {\r\n    item.addEventListener(\"click\", evt => {\r\n        const popup = evt.target.closest(\".popup\")\r\n        closePopup(popup);\r\n    });\r\n});\r\n\r\n//Слушатель изменения данных профиля\r\neditForm.addEventListener(\"submit\", handleFormEdit);\r\n\r\n//Слушатель добавления карточки из popup'a\r\nnewPlace.addEventListener(\"submit\", handleCreateCard);\r\n\r\n//Слушатель обновления аватара пользователя\r\neditAvatar.addEventListener(\"submit\", handleEditAvatar);\r\n\r\n//Активация валидации\r\nenableValidation(validationConfig);"],"names":["openPopup","somePopup","classList","add","document","addEventListener","closePopupByEsc","closePopupByOverlay","closePopup","remove","removeEventListener","evt","key","querySelector","target","contains","renderLoading","isLoading","formElement","activeBtnSubmit","textContent","baseURL","groupId","token","createCard","_ref","userId","deleteCard","likeCardBtn","modalOpenImageCard","name","link","likes","_id","owner","cardItem","content","cloneNode","cardImage","likeCounter","likeButton","deleteButton","src","alt","length","forEach","like","deleteCardBtn","cardId","cardElement","fetch","concat","method","headers","authorization","then","res","ok","json","Promise","reject","status","catch","err","console","log","deleteUserCard","error","isLiked","toggleLike","updateCard","toggle","hideInputError","inputElement","inputErrorClass","errorClass","errorElement","id","toggleButtonState","inputList","buttonElement","inactiveButtonClass","some","validity","valid","hasInvalidInput","disavled","clearValidation","validationConfig","Array","from","querySelectorAll","inputSelector","submitButtonSelector","profileEditButton","profileAddButton","profileEditAvatar","popupCloseBtnAll","editForm","forms","edit_profile","newPlace","new_place","editAvatar","edit_avatar","popupEdit","popupNewCard","popupTypeImage","popupEditAvatar","cardList","popupCaption","popupImage","nameCardPopup","linkImgPopup","nameInput","jobInput","profileTitle","profileDescription","profileAvatar","formSelector","all","_ref2","userData","cards","about","avatar","cardData","newCardItem","_objectSpread","append","value","reset","item","popup","closest","preventDefault","job","body","JSON","stringify","updateUserData","newUser","finally","addNewCard","newCard","prepend","avatarLink","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","isValid","setEventListeners"],"sourceRoot":""}